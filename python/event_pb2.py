# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: event.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import object_pb2 as object__pb2
import scenario_pb2 as scenario__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0b\x65vent.proto\x1a\x0cobject.proto\x1a\x0escenario.proto\"\x0e\n\x0c\x45ventRequest\"}\n\tEventData\x12\x15\n\roccurred_time\x18\x01 \x01(\t\x12%\n\x10object_type_list\x18\x02 \x03(\x0e\x32\x0b.ObjectType\x12\x11\n\tcamera_id\x18\x03 \x01(\x05\x12\x1f\n\x08scenario\x18\x04 \x01(\x0e\x32\r.ScenarioType2@\n\x0c\x45ventService\x12\x30\n\x0fstreaming_event\x12\r.EventRequest\x1a\n.EventData\"\x00\x30\x01\x62\x06proto3')



_EVENTREQUEST = DESCRIPTOR.message_types_by_name['EventRequest']
_EVENTDATA = DESCRIPTOR.message_types_by_name['EventData']
EventRequest = _reflection.GeneratedProtocolMessageType('EventRequest', (_message.Message,), {
  'DESCRIPTOR' : _EVENTREQUEST,
  '__module__' : 'event_pb2'
  # @@protoc_insertion_point(class_scope:EventRequest)
  })
_sym_db.RegisterMessage(EventRequest)

EventData = _reflection.GeneratedProtocolMessageType('EventData', (_message.Message,), {
  'DESCRIPTOR' : _EVENTDATA,
  '__module__' : 'event_pb2'
  # @@protoc_insertion_point(class_scope:EventData)
  })
_sym_db.RegisterMessage(EventData)

_EVENTSERVICE = DESCRIPTOR.services_by_name['EventService']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _EVENTREQUEST._serialized_start=45
  _EVENTREQUEST._serialized_end=59
  _EVENTDATA._serialized_start=61
  _EVENTDATA._serialized_end=186
  _EVENTSERVICE._serialized_start=188
  _EVENTSERVICE._serialized_end=252
# @@protoc_insertion_point(module_scope)
